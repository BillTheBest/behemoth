/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package com.digitalpebble.behemoth;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class BehemothDocument extends
        org.apache.avro.specific.SpecificRecordBase implements
        org.apache.avro.specific.SpecificRecord {
    public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser()
            .parse("{\"type\":\"record\",\"name\":\"BehemothDocument\",\"namespace\":\"com.digitalpebble.behemoth\",\"fields\":[{\"name\":\"url\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"contentType\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"text\",\"type\":[\"null\",{\"type\":\"string\",\"avro.java.string\":\"String\"}]},{\"name\":\"content\",\"type\":[\"null\",\"bytes\"]},{\"name\":\"metadata\",\"type\":[\"null\",{\"type\":\"map\",\"values\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"avro.java.string\":\"String\"}]},{\"name\":\"annotations\",\"type\":[\"null\",{\"type\":\"array\",\"items\":{\"type\":\"record\",\"name\":\"Annotation\",\"fields\":[{\"name\":\"start\",\"type\":\"long\"},{\"name\":\"end\",\"type\":\"long\"},{\"name\":\"type\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"features\",\"type\":[\"null\",{\"type\":\"map\",\"values\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"avro.java.string\":\"String\"}]}]}}]}]}");

    public static org.apache.avro.Schema getClassSchema() {
        return SCHEMA$;
    }

    @Deprecated
    public java.lang.String url;
    @Deprecated
    public java.lang.String contentType;
    @Deprecated
    public java.lang.String text;
    @Deprecated
    public java.nio.ByteBuffer content;
    @Deprecated
    public java.util.Map<java.lang.String, java.lang.String> metadata;
    @Deprecated
    public java.util.List<com.digitalpebble.behemoth.Annotation> annotations;

    /**
     * Default constructor. Note that this does not initialize fields to their
     * default values from the schema. If that is desired then one should use
     * {@link \#newBuilder()}.
     */
    public BehemothDocument() {
    }

    /**
     * All-args constructor.
     */
    public BehemothDocument(java.lang.String url, java.lang.String contentType,
            java.lang.String text, java.nio.ByteBuffer content,
            java.util.Map<java.lang.String, java.lang.String> metadata,
            java.util.List<com.digitalpebble.behemoth.Annotation> annotations) {
        this.url = url;
        this.contentType = contentType;
        this.text = text;
        this.content = content;
        this.metadata = metadata;
        this.annotations = annotations;
    }

    public org.apache.avro.Schema getSchema() {
        return SCHEMA$;
    }

    // Used by DatumWriter. Applications should not call.
    public java.lang.Object get(int field$) {
        switch (field$) {
        case 0:
            return url;
        case 1:
            return contentType;
        case 2:
            return text;
        case 3:
            return content;
        case 4:
            return metadata;
        case 5:
            return annotations;
        default:
            throw new org.apache.avro.AvroRuntimeException("Bad index");
        }
    }

    // Used by DatumReader. Applications should not call.
    @SuppressWarnings(value = "unchecked")
    public void put(int field$, java.lang.Object value$) {
        switch (field$) {
        case 0:
            url = (java.lang.String) value$;
            break;
        case 1:
            contentType = (java.lang.String) value$;
            break;
        case 2:
            text = (java.lang.String) value$;
            break;
        case 3:
            content = (java.nio.ByteBuffer) value$;
            break;
        case 4:
            metadata = (java.util.Map<java.lang.String, java.lang.String>) value$;
            break;
        case 5:
            annotations = (java.util.List<com.digitalpebble.behemoth.Annotation>) value$;
            break;
        default:
            throw new org.apache.avro.AvroRuntimeException("Bad index");
        }
    }

    /**
     * Gets the value of the 'url' field.
     */
    public java.lang.String getUrl() {
        return url;
    }

    /**
     * Sets the value of the 'url' field.
     * 
     * @param value
     *            the value to set.
     */
    public void setUrl(java.lang.String value) {
        this.url = value;
    }

    /**
     * Gets the value of the 'contentType' field.
     */
    public java.lang.String getContentType() {
        return contentType;
    }

    /**
     * Sets the value of the 'contentType' field.
     * 
     * @param value
     *            the value to set.
     */
    public void setContentType(java.lang.String value) {
        this.contentType = value;
    }

    /**
     * Gets the value of the 'text' field.
     */
    public java.lang.String getText() {
        return text;
    }

    /**
     * Sets the value of the 'text' field.
     * 
     * @param value
     *            the value to set.
     */
    public void setText(java.lang.String value) {
        this.text = value;
    }

    /**
     * Gets the value of the 'content' field.
     */
    public java.nio.ByteBuffer getContent() {
        return content;
    }

    /**
     * Sets the value of the 'content' field.
     * 
     * @param value
     *            the value to set.
     */
    public void setContent(java.nio.ByteBuffer value) {
        this.content = value;
    }

    /**
     * Gets the value of the 'metadata' field.
     */
    public java.util.Map<java.lang.String, java.lang.String> getMetadata() {
        return metadata;
    }

    /**
     * Sets the value of the 'metadata' field.
     * 
     * @param value
     *            the value to set.
     */
    public void setMetadata(
            java.util.Map<java.lang.String, java.lang.String> value) {
        this.metadata = value;
    }

    /**
     * Gets the value of the 'annotations' field.
     */
    public java.util.List<com.digitalpebble.behemoth.Annotation> getAnnotations() {
        return annotations;
    }

    /**
     * Sets the value of the 'annotations' field.
     * 
     * @param value
     *            the value to set.
     */
    public void setAnnotations(
            java.util.List<com.digitalpebble.behemoth.Annotation> value) {
        this.annotations = value;
    }

    /** Creates a new BehemothDocument RecordBuilder */
    public static com.digitalpebble.behemoth.BehemothDocument.Builder newBuilder() {
        return new com.digitalpebble.behemoth.BehemothDocument.Builder();
    }

    /**
     * Creates a new BehemothDocument RecordBuilder by copying an existing
     * Builder
     */
    public static com.digitalpebble.behemoth.BehemothDocument.Builder newBuilder(
            com.digitalpebble.behemoth.BehemothDocument.Builder other) {
        return new com.digitalpebble.behemoth.BehemothDocument.Builder(other);
    }

    /**
     * Creates a new BehemothDocument RecordBuilder by copying an existing
     * BehemothDocument instance
     */
    public static com.digitalpebble.behemoth.BehemothDocument.Builder newBuilder(
            com.digitalpebble.behemoth.BehemothDocument other) {
        return new com.digitalpebble.behemoth.BehemothDocument.Builder(other);
    }

    /**
     * RecordBuilder for BehemothDocument instances.
     */
    public static class Builder
            extends
            org.apache.avro.specific.SpecificRecordBuilderBase<BehemothDocument>
            implements org.apache.avro.data.RecordBuilder<BehemothDocument> {

        private java.lang.String url;
        private java.lang.String contentType;
        private java.lang.String text;
        private java.nio.ByteBuffer content;
        private java.util.Map<java.lang.String, java.lang.String> metadata;
        private java.util.List<com.digitalpebble.behemoth.Annotation> annotations;

        /** Creates a new Builder */
        private Builder() {
            super(com.digitalpebble.behemoth.BehemothDocument.SCHEMA$);
        }

        /** Creates a Builder by copying an existing Builder */
        private Builder(
                com.digitalpebble.behemoth.BehemothDocument.Builder other) {
            super(other);
            if (isValidValue(fields()[0], other.url)) {
                this.url = data().deepCopy(fields()[0].schema(), other.url);
                fieldSetFlags()[0] = true;
            }
            if (isValidValue(fields()[1], other.contentType)) {
                this.contentType = data().deepCopy(fields()[1].schema(),
                        other.contentType);
                fieldSetFlags()[1] = true;
            }
            if (isValidValue(fields()[2], other.text)) {
                this.text = data().deepCopy(fields()[2].schema(), other.text);
                fieldSetFlags()[2] = true;
            }
            if (isValidValue(fields()[3], other.content)) {
                this.content = data().deepCopy(fields()[3].schema(),
                        other.content);
                fieldSetFlags()[3] = true;
            }
            if (isValidValue(fields()[4], other.metadata)) {
                this.metadata = data().deepCopy(fields()[4].schema(),
                        other.metadata);
                fieldSetFlags()[4] = true;
            }
            if (isValidValue(fields()[5], other.annotations)) {
                this.annotations = data().deepCopy(fields()[5].schema(),
                        other.annotations);
                fieldSetFlags()[5] = true;
            }
        }

        /** Creates a Builder by copying an existing BehemothDocument instance */
        private Builder(com.digitalpebble.behemoth.BehemothDocument other) {
            super(com.digitalpebble.behemoth.BehemothDocument.SCHEMA$);
            if (isValidValue(fields()[0], other.url)) {
                this.url = data().deepCopy(fields()[0].schema(), other.url);
                fieldSetFlags()[0] = true;
            }
            if (isValidValue(fields()[1], other.contentType)) {
                this.contentType = data().deepCopy(fields()[1].schema(),
                        other.contentType);
                fieldSetFlags()[1] = true;
            }
            if (isValidValue(fields()[2], other.text)) {
                this.text = data().deepCopy(fields()[2].schema(), other.text);
                fieldSetFlags()[2] = true;
            }
            if (isValidValue(fields()[3], other.content)) {
                this.content = data().deepCopy(fields()[3].schema(),
                        other.content);
                fieldSetFlags()[3] = true;
            }
            if (isValidValue(fields()[4], other.metadata)) {
                this.metadata = data().deepCopy(fields()[4].schema(),
                        other.metadata);
                fieldSetFlags()[4] = true;
            }
            if (isValidValue(fields()[5], other.annotations)) {
                this.annotations = data().deepCopy(fields()[5].schema(),
                        other.annotations);
                fieldSetFlags()[5] = true;
            }
        }

        /** Gets the value of the 'url' field */
        public java.lang.String getUrl() {
            return url;
        }

        /** Sets the value of the 'url' field */
        public com.digitalpebble.behemoth.BehemothDocument.Builder setUrl(
                java.lang.String value) {
            validate(fields()[0], value);
            this.url = value;
            fieldSetFlags()[0] = true;
            return this;
        }

        /** Checks whether the 'url' field has been set */
        public boolean hasUrl() {
            return fieldSetFlags()[0];
        }

        /** Clears the value of the 'url' field */
        public com.digitalpebble.behemoth.BehemothDocument.Builder clearUrl() {
            url = null;
            fieldSetFlags()[0] = false;
            return this;
        }

        /** Gets the value of the 'contentType' field */
        public java.lang.String getContentType() {
            return contentType;
        }

        /** Sets the value of the 'contentType' field */
        public com.digitalpebble.behemoth.BehemothDocument.Builder setContentType(
                java.lang.String value) {
            validate(fields()[1], value);
            this.contentType = value;
            fieldSetFlags()[1] = true;
            return this;
        }

        /** Checks whether the 'contentType' field has been set */
        public boolean hasContentType() {
            return fieldSetFlags()[1];
        }

        /** Clears the value of the 'contentType' field */
        public com.digitalpebble.behemoth.BehemothDocument.Builder clearContentType() {
            contentType = null;
            fieldSetFlags()[1] = false;
            return this;
        }

        /** Gets the value of the 'text' field */
        public java.lang.String getText() {
            return text;
        }

        /** Sets the value of the 'text' field */
        public com.digitalpebble.behemoth.BehemothDocument.Builder setText(
                java.lang.String value) {
            validate(fields()[2], value);
            this.text = value;
            fieldSetFlags()[2] = true;
            return this;
        }

        /** Checks whether the 'text' field has been set */
        public boolean hasText() {
            return fieldSetFlags()[2];
        }

        /** Clears the value of the 'text' field */
        public com.digitalpebble.behemoth.BehemothDocument.Builder clearText() {
            text = null;
            fieldSetFlags()[2] = false;
            return this;
        }

        /** Gets the value of the 'content' field */
        public java.nio.ByteBuffer getContent() {
            return content;
        }

        /** Sets the value of the 'content' field */
        public com.digitalpebble.behemoth.BehemothDocument.Builder setContent(
                java.nio.ByteBuffer value) {
            validate(fields()[3], value);
            this.content = value;
            fieldSetFlags()[3] = true;
            return this;
        }

        /** Checks whether the 'content' field has been set */
        public boolean hasContent() {
            return fieldSetFlags()[3];
        }

        /** Clears the value of the 'content' field */
        public com.digitalpebble.behemoth.BehemothDocument.Builder clearContent() {
            content = null;
            fieldSetFlags()[3] = false;
            return this;
        }

        /** Gets the value of the 'metadata' field */
        public java.util.Map<java.lang.String, java.lang.String> getMetadata() {
            return metadata;
        }

        /** Sets the value of the 'metadata' field */
        public com.digitalpebble.behemoth.BehemothDocument.Builder setMetadata(
                java.util.Map<java.lang.String, java.lang.String> value) {
            validate(fields()[4], value);
            this.metadata = value;
            fieldSetFlags()[4] = true;
            return this;
        }

        /** Checks whether the 'metadata' field has been set */
        public boolean hasMetadata() {
            return fieldSetFlags()[4];
        }

        /** Clears the value of the 'metadata' field */
        public com.digitalpebble.behemoth.BehemothDocument.Builder clearMetadata() {
            metadata = null;
            fieldSetFlags()[4] = false;
            return this;
        }

        /** Gets the value of the 'annotations' field */
        public java.util.List<com.digitalpebble.behemoth.Annotation> getAnnotations() {
            return annotations;
        }

        /** Sets the value of the 'annotations' field */
        public com.digitalpebble.behemoth.BehemothDocument.Builder setAnnotations(
                java.util.List<com.digitalpebble.behemoth.Annotation> value) {
            validate(fields()[5], value);
            this.annotations = value;
            fieldSetFlags()[5] = true;
            return this;
        }

        /** Checks whether the 'annotations' field has been set */
        public boolean hasAnnotations() {
            return fieldSetFlags()[5];
        }

        /** Clears the value of the 'annotations' field */
        public com.digitalpebble.behemoth.BehemothDocument.Builder clearAnnotations() {
            annotations = null;
            fieldSetFlags()[5] = false;
            return this;
        }

        @Override
        public BehemothDocument build() {
            try {
                BehemothDocument record = new BehemothDocument();
                record.url = fieldSetFlags()[0] ? this.url
                        : (java.lang.String) defaultValue(fields()[0]);
                record.contentType = fieldSetFlags()[1] ? this.contentType
                        : (java.lang.String) defaultValue(fields()[1]);
                record.text = fieldSetFlags()[2] ? this.text
                        : (java.lang.String) defaultValue(fields()[2]);
                record.content = fieldSetFlags()[3] ? this.content
                        : (java.nio.ByteBuffer) defaultValue(fields()[3]);
                record.metadata = fieldSetFlags()[4] ? this.metadata
                        : (java.util.Map<java.lang.String, java.lang.String>) defaultValue(fields()[4]);
                record.annotations = fieldSetFlags()[5] ? this.annotations
                        : (java.util.List<com.digitalpebble.behemoth.Annotation>) defaultValue(fields()[5]);
                return record;
            } catch (Exception e) {
                throw new org.apache.avro.AvroRuntimeException(e);
            }
        }
    }
}

/**
 * Autogenerated by Avro
 * 
 * DO NOT EDIT DIRECTLY
 */
package com.digitalpebble.behemoth;

@SuppressWarnings("all")
@org.apache.avro.specific.AvroGenerated
public class Annotation extends org.apache.avro.specific.SpecificRecordBase
        implements org.apache.avro.specific.SpecificRecord {
    public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser()
            .parse("{\"type\":\"record\",\"name\":\"Annotation\",\"namespace\":\"com.digitalpebble.behemoth\",\"fields\":[{\"name\":\"start\",\"type\":\"long\"},{\"name\":\"end\",\"type\":\"long\"},{\"name\":\"type\",\"type\":{\"type\":\"string\",\"avro.java.string\":\"String\"}},{\"name\":\"features\",\"type\":[\"null\",{\"type\":\"map\",\"values\":{\"type\":\"string\",\"avro.java.string\":\"String\"},\"avro.java.string\":\"String\"}]}]}");

    public static org.apache.avro.Schema getClassSchema() {
        return SCHEMA$;
    }

    @Deprecated
    public long start;
    @Deprecated
    public long end;
    @Deprecated
    public java.lang.String type;
    @Deprecated
    public java.util.Map<java.lang.String, java.lang.String> features;

    /**
     * Default constructor. Note that this does not initialize fields to their
     * default values from the schema. If that is desired then one should use
     * {@link \#newBuilder()}.
     */
    public Annotation() {
    }

    /**
     * All-args constructor.
     */
    public Annotation(java.lang.Long start, java.lang.Long end,
            java.lang.String type,
            java.util.Map<java.lang.String, java.lang.String> features) {
        this.start = start;
        this.end = end;
        this.type = type;
        this.features = features;
    }

    public org.apache.avro.Schema getSchema() {
        return SCHEMA$;
    }

    // Used by DatumWriter. Applications should not call.
    public java.lang.Object get(int field$) {
        switch (field$) {
        case 0:
            return start;
        case 1:
            return end;
        case 2:
            return type;
        case 3:
            return features;
        default:
            throw new org.apache.avro.AvroRuntimeException("Bad index");
        }
    }

    // Used by DatumReader. Applications should not call.
    @SuppressWarnings(value = "unchecked")
    public void put(int field$, java.lang.Object value$) {
        switch (field$) {
        case 0:
            start = (java.lang.Long) value$;
            break;
        case 1:
            end = (java.lang.Long) value$;
            break;
        case 2:
            type = (java.lang.String) value$;
            break;
        case 3:
            features = (java.util.Map<java.lang.String, java.lang.String>) value$;
            break;
        default:
            throw new org.apache.avro.AvroRuntimeException("Bad index");
        }
    }

    /**
     * Gets the value of the 'start' field.
     */
    public java.lang.Long getStart() {
        return start;
    }

    /**
     * Sets the value of the 'start' field.
     * 
     * @param value
     *            the value to set.
     */
    public void setStart(java.lang.Long value) {
        this.start = value;
    }

    /**
     * Gets the value of the 'end' field.
     */
    public java.lang.Long getEnd() {
        return end;
    }

    /**
     * Sets the value of the 'end' field.
     * 
     * @param value
     *            the value to set.
     */
    public void setEnd(java.lang.Long value) {
        this.end = value;
    }

    /**
     * Gets the value of the 'type' field.
     */
    public java.lang.String getType() {
        return type;
    }

    /**
     * Sets the value of the 'type' field.
     * 
     * @param value
     *            the value to set.
     */
    public void setType(java.lang.String value) {
        this.type = value;
    }

    /**
     * Gets the value of the 'features' field.
     */
    public java.util.Map<java.lang.String, java.lang.String> getFeatures() {
        return features;
    }

    /**
     * Sets the value of the 'features' field.
     * 
     * @param value
     *            the value to set.
     */
    public void setFeatures(
            java.util.Map<java.lang.String, java.lang.String> value) {
        this.features = value;
    }

    /** Creates a new Annotation RecordBuilder */
    public static com.digitalpebble.behemoth.Annotation.Builder newBuilder() {
        return new com.digitalpebble.behemoth.Annotation.Builder();
    }

    /** Creates a new Annotation RecordBuilder by copying an existing Builder */
    public static com.digitalpebble.behemoth.Annotation.Builder newBuilder(
            com.digitalpebble.behemoth.Annotation.Builder other) {
        return new com.digitalpebble.behemoth.Annotation.Builder(other);
    }

    /**
     * Creates a new Annotation RecordBuilder by copying an existing Annotation
     * instance
     */
    public static com.digitalpebble.behemoth.Annotation.Builder newBuilder(
            com.digitalpebble.behemoth.Annotation other) {
        return new com.digitalpebble.behemoth.Annotation.Builder(other);
    }

    /**
     * RecordBuilder for Annotation instances.
     */
    public static class Builder extends
            org.apache.avro.specific.SpecificRecordBuilderBase<Annotation>
            implements org.apache.avro.data.RecordBuilder<Annotation> {

        private long start;
        private long end;
        private java.lang.String type;
        private java.util.Map<java.lang.String, java.lang.String> features;

        /** Creates a new Builder */
        private Builder() {
            super(com.digitalpebble.behemoth.Annotation.SCHEMA$);
        }

        /** Creates a Builder by copying an existing Builder */
        private Builder(com.digitalpebble.behemoth.Annotation.Builder other) {
            super(other);
            if (isValidValue(fields()[0], other.start)) {
                this.start = data().deepCopy(fields()[0].schema(), other.start);
                fieldSetFlags()[0] = true;
            }
            if (isValidValue(fields()[1], other.end)) {
                this.end = data().deepCopy(fields()[1].schema(), other.end);
                fieldSetFlags()[1] = true;
            }
            if (isValidValue(fields()[2], other.type)) {
                this.type = data().deepCopy(fields()[2].schema(), other.type);
                fieldSetFlags()[2] = true;
            }
            if (isValidValue(fields()[3], other.features)) {
                this.features = data().deepCopy(fields()[3].schema(),
                        other.features);
                fieldSetFlags()[3] = true;
            }
        }

        /** Creates a Builder by copying an existing Annotation instance */
        private Builder(com.digitalpebble.behemoth.Annotation other) {
            super(com.digitalpebble.behemoth.Annotation.SCHEMA$);
            if (isValidValue(fields()[0], other.start)) {
                this.start = data().deepCopy(fields()[0].schema(), other.start);
                fieldSetFlags()[0] = true;
            }
            if (isValidValue(fields()[1], other.end)) {
                this.end = data().deepCopy(fields()[1].schema(), other.end);
                fieldSetFlags()[1] = true;
            }
            if (isValidValue(fields()[2], other.type)) {
                this.type = data().deepCopy(fields()[2].schema(), other.type);
                fieldSetFlags()[2] = true;
            }
            if (isValidValue(fields()[3], other.features)) {
                this.features = data().deepCopy(fields()[3].schema(),
                        other.features);
                fieldSetFlags()[3] = true;
            }
        }

        /** Gets the value of the 'start' field */
        public java.lang.Long getStart() {
            return start;
        }

        /** Sets the value of the 'start' field */
        public com.digitalpebble.behemoth.Annotation.Builder setStart(long value) {
            validate(fields()[0], value);
            this.start = value;
            fieldSetFlags()[0] = true;
            return this;
        }

        /** Checks whether the 'start' field has been set */
        public boolean hasStart() {
            return fieldSetFlags()[0];
        }

        /** Clears the value of the 'start' field */
        public com.digitalpebble.behemoth.Annotation.Builder clearStart() {
            fieldSetFlags()[0] = false;
            return this;
        }

        /** Gets the value of the 'end' field */
        public java.lang.Long getEnd() {
            return end;
        }

        /** Sets the value of the 'end' field */
        public com.digitalpebble.behemoth.Annotation.Builder setEnd(long value) {
            validate(fields()[1], value);
            this.end = value;
            fieldSetFlags()[1] = true;
            return this;
        }

        /** Checks whether the 'end' field has been set */
        public boolean hasEnd() {
            return fieldSetFlags()[1];
        }

        /** Clears the value of the 'end' field */
        public com.digitalpebble.behemoth.Annotation.Builder clearEnd() {
            fieldSetFlags()[1] = false;
            return this;
        }

        /** Gets the value of the 'type' field */
        public java.lang.String getType() {
            return type;
        }

        /** Sets the value of the 'type' field */
        public com.digitalpebble.behemoth.Annotation.Builder setType(
                java.lang.String value) {
            validate(fields()[2], value);
            this.type = value;
            fieldSetFlags()[2] = true;
            return this;
        }

        /** Checks whether the 'type' field has been set */
        public boolean hasType() {
            return fieldSetFlags()[2];
        }

        /** Clears the value of the 'type' field */
        public com.digitalpebble.behemoth.Annotation.Builder clearType() {
            type = null;
            fieldSetFlags()[2] = false;
            return this;
        }

        /** Gets the value of the 'features' field */
        public java.util.Map<java.lang.String, java.lang.String> getFeatures() {
            return features;
        }

        /** Sets the value of the 'features' field */
        public com.digitalpebble.behemoth.Annotation.Builder setFeatures(
                java.util.Map<java.lang.String, java.lang.String> value) {
            validate(fields()[3], value);
            this.features = value;
            fieldSetFlags()[3] = true;
            return this;
        }

        /** Checks whether the 'features' field has been set */
        public boolean hasFeatures() {
            return fieldSetFlags()[3];
        }

        /** Clears the value of the 'features' field */
        public com.digitalpebble.behemoth.Annotation.Builder clearFeatures() {
            features = null;
            fieldSetFlags()[3] = false;
            return this;
        }

        @Override
        public Annotation build() {
            try {
                Annotation record = new Annotation();
                record.start = fieldSetFlags()[0] ? this.start
                        : (java.lang.Long) defaultValue(fields()[0]);
                record.end = fieldSetFlags()[1] ? this.end
                        : (java.lang.Long) defaultValue(fields()[1]);
                record.type = fieldSetFlags()[2] ? this.type
                        : (java.lang.String) defaultValue(fields()[2]);
                record.features = fieldSetFlags()[3] ? this.features
                        : (java.util.Map<java.lang.String, java.lang.String>) defaultValue(fields()[3]);
                return record;
            } catch (Exception e) {
                throw new org.apache.avro.AvroRuntimeException(e);
            }
        }
    }
}
